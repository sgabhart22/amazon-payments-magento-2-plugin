<?xml version="1.0" encoding="UTF-8"?>
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AmazonCancelReturnUrl">
        <annotations>
            <stories value="Amazon Cancel Return Url"/>
            <title value="Amazon Cancel Return Url"/>
            <description value="User should be directed to the page where they clicked the Amazon Pay button when clicking Cancel"/>
            <severity value="CRITICAL"/>
            <group value="amazon_pay"/>
            <group value="amazon_pay_button"/>
        </annotations>

        <before>
            <createData entity="SimpleTwo" stepKey="createSimpleProduct"/>
            <createData entity="SampleAmazonPaymentConfigLwa" stepKey="SampleAmazonPaymentConfigLwa"/>
            <magentoCLI command="config:set {{AmazonButtonProductConfig.path}} 1" stepKey="displayAmazonButtonProduct"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginToAdminPanel"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>

        <after>
            <createData entity="SampleAmazonPaymentConfig" stepKey="SampleAmazonPaymentConfigData"/>
            <actionGroup ref="DeleteCustomerByEmailActionGroup" stepKey="deleteCustomer">
                <argument name="email" value="{{AmazonAccount.email}}"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </after>

        <!-- Click Sign-in button from sign-in page -->
        <amOnPage url="{{StorefrontCustomerSignInPage.url}}" stepKey="amOnSignInPage"/>
        <waitForPageLoad time="30" stepKey="waitPageFullyLoaded"/>

        <!--Save opener window name since popup auto-closes-->
        <executeJS function="return window.name;" stepKey="openerName"/>
        <click selector="{{AmazonLoginSection.login}}" stepKey="signInWithAmazon"/>
        <actionGroup ref="AmazonSwitchToPopupActionGroup" stepKey="allowPopupToOpen" />

        <!-- Login to Amazon -->
        <actionGroup ref="AmazonBeginLoginOnlyActionGroup" stepKey="amazonBeginLoginOnlyActionGroup"/>
        <waitForPageLoad stepKey="waitForSigninPageLoad"/>
        <seeInCurrentUrl url="{{StorefrontCustomerSignInPage.url}}" stepKey="assertLoginUrl"/>

        <!--Go to product page-->
        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProductStoreFront">
            <argument name="productUrl" value="$$createSimpleProduct.custom_attributes[url_key]$$"/>
        </actionGroup>
        <!--Verify only Amazon Button is present-->
        <seeElement selector="{{AmazonButtonSection.product}}" stepKey="seeEnabledAmazonButton"/>

        <!-- Click Amazon Pay button on product page and login -->
        <click selector="{{AmazonButtonSection.product}}" stepKey="clickAmazonButton"/>
        <actionGroup ref="AmazonSwitchToPopupActionGroup" stepKey="allowPopupToOpen2" />
        <wait time="3" stepKey="allowButtonToActivate"/>

        <!-- Sign in or 'Continue As' Amazon buyer -->
        <executeInSelenium function="function (\Facebook\WebDriver\Remote\RemoteWebDriver $remoteWebDriver) use ($I, $openerName) {
            $emailField = $remoteWebDriver->findElements(
                \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.emailField}}')
            );

            if (!empty($emailField)) {
                $I->fillField('{{AmazonPageSection.emailField}}', new \Codeception\Step\Argument\PasswordArgument('pay-demo-eu@amazon.com'));
                $I->fillField('{{AmazonPageSection.passwordField}}', new \Codeception\Step\Argument\PasswordArgument('demo123'));

                try {
                    $remoteWebDriver->findElement(
                        \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.signInButton}}')
                    )->click();
                    $remoteWebDriver->switchTo()->window($openerName);
                    $I->wait(5);
                } catch (\Exception $ex) {
                    $I->comment('exception caught');
                } catch (\Error $err) {
                    $I->comment('error caught');
                }
            } else {
                $I->comment('Popup appeared as normal');
                $continueAs = $remoteWebDriver->findElements(\Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.continueButton}}'));

                if (!empty($continueAs)) {
                    $I->comment('Click Continue as... button and return to checkout');
                    $continueAs[0]->click();
                    $remoteWebDriver->switchTo()->window($openerName);
                    $I->waitForPageLoad(30);

                    $I->comment('Wait for Edit button in address details');
                    $editAddressSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonCheckoutSection.editShippingButton}}');
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::elementToBeClickable($editAddressSelector));
                    $I->comment('Click Edit button to return to normal flow');
                    $remoteWebDriver->findElement($editAddressSelector)->click();
                    
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::numberOfWindowsToBe(2));
                    $I->switchToNextTab();
                    $addressIdSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.addressId}}');
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::presenceOfElementLocated($addressIdSelector));
                } else {
                    $addressIdSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.addressId}}');
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::presenceOfElementLocated($addressIdSelector));
                }
            }
        }" stepKey="signInIfNecessary" />

        <executeInSelenium function="function (\Facebook\WebDriver\Remote\RemoteWebDriver $remoteWebDriver) use ($I, $openerName) {
            try {
                if (count($remoteWebDriver->getWindowHandles()) > 1) {
                    if ($I->executeJS('return window.name;') === $openerName) {
                        $I->comment('Popup remained open, switching back to it');
                        $I->switchToNextTab();
                    }
    
                    $continueAs = $remoteWebDriver->findElements(\Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.continueButton}}'));

                    if (!empty($continueAs)) {
                        $I->comment('Click Continue as... button and return to checkout');
                        $continueAs[0]->click();
                        $remoteWebDriver->switchTo()->window($openerName);
                        $I->waitForPageLoad(30);

                        $I->comment('Wait for Edit button in address details');
                        $editAddressSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonCheckoutSection.editShippingButton}}');
                        $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::elementToBeClickable($editAddressSelector));
                        $I->comment('Click Edit button to return to normal flow');
                        $remoteWebDriver->findElement($editAddressSelector)->click();
                        
                        $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::numberOfWindowsToBe(2));
                        $I->switchToNextTab();
                        $addressIdSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.addressId}}');
                        $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::presenceOfElementLocated($addressIdSelector));
                    } else {
                        $addressIdSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.addressId}}');
                        $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::presenceOfElementLocated($addressIdSelector));
                    }
                } else {
                    $I->comment('Popup closed, allowing checkout page to load');
                    $I->comment('Wait for Edit button in address details');
                    $editAddressSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonCheckoutSection.editShippingButton}}');
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::elementToBeClickable($editAddressSelector));
                    $I->comment('Click Edit button to return to normal flow');
                    $remoteWebDriver->findElement($editAddressSelector)->click();
                    
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::numberOfWindowsToBe(2));
                    $I->switchToNextTab();
                    $addressIdSelector = \Facebook\WebDriver\WebDriverBy::cssSelector('{{AmazonPageSection.addressId}}');
                    $remoteWebDriver->wait(30, 100)->until(\Facebook\WebDriver\WebDriverExpectedCondition::presenceOfElementLocated($addressIdSelector));
                }
            } catch (\Exception $ex) {

            }
        }" stepKey="handlePopupSecondScreen2" />

        <!--Come back to checkout with default address-->
        <actionGroup ref="AmazonCheckoutActionGroup" stepKey="DefaultAmazonCheckoutActionGroup">
            <argument name="openerName" value="{$openerName}"/>
        </actionGroup>

        <!-- Click edit button on address -->
        <click selector="{{AmazonCheckoutSection.editShippingButton}}" stepKey="clickAmazonEditShippingButton"/>
        <actionGroup ref="AmazonSwitchToPopupActionGroup" stepKey="allowPopupToOpen3" />
        <waitForElement selector="{{AmazonPageSection.cancelButton}}" stepKey="waitForCancelCheckout"/>

        <!-- Click cancel button on Amazon hosted page -->
        <click selector="{{AmazonPageSection.cancelButton}}" stepKey="cancelCheckout"/>
        <!-- Switch back to main window -->
        <switchToWindow userInput="{$openerName}" stepKey="switchToWindowOpener2" />
        <waitForPageLoad stepKey="waitForProductPageLoad"/>

        <!-- Assert being back in the product page -->
        <seeInCurrentUrl url="{{CheckoutPage.url}}" stepKey="assertProductUrl"/>
    </test>
</tests>
